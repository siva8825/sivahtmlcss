function get_from_idb(key,resolve,reject){try{const db_name='sp';const obs_name='mus';const db_ver=2;const connection=indexedDB.open(db_name,db_ver);connection.onupgradeneeded=function(event){const db=event.target.result;if(!db.objectStoreNames.contains(obs_name)){db.createObjectStore(obs_name);}};connection.onsuccess=function(event){const db=event.target.result;const transaction=db.transaction(obs_name,'readonly');const _store=transaction.objectStore(obs_name);const _cursor=_store.get(key);_cursor.onsuccess=function(event){resolve(event.target.result);};_cursor.onerror=function(event){console.error('Error retrieving object from IndexedDB:',event.target.error);reject(event.target.error);};db.close();};}catch(error){console.error('Error retrieving object from IndexedDB:',error);reject(error);}}
function save_into_idb(key,object,resolve,reject){try{const db_name='sp';const obs_name='mus';const db_ver=2;const connection=indexedDB.open(db_name,db_ver);connection.onupgradeneeded=function(event){const db=event.target.result;if(!db.objectStoreNames.contains(obs_name)){db.createObjectStore(obs_name);}};connection.onsuccess=function(event){const db=event.target.result;const transaction=db.transaction(obs_name,'readwrite');const _store=transaction.objectStore(obs_name);_store.put(object,key);transaction.oncomplete=function(){resolve(true);console.log('Object saved to IndexedDB successfully');};transaction.onerror=function(event){reject(event.target.error);console.error('Error saving object to IndexedDB:',event.target.error);};db.close();};}catch(error){reject(error);console.error('Error saving object to IndexedDB:',error);}}
async function slide_up(target,duration=500){target.style.transitionProperty='height, margin, padding';target.style.transitionDuration=duration+'ms';target.style.boxSizing='border-box';target.style.height=target.offsetHeight+'px';target.offsetHeight;target.style.overflow='hidden';target.style.height=0;target.style.paddingTop=0;target.style.paddingBottom=0;target.style.marginTop=0;target.style.marginBottom=0;await sleep(duration);target.style.display='none';target.style.removeProperty('height');target.style.removeProperty('padding-top');target.style.removeProperty('padding-bottom');target.style.removeProperty('margin-top');target.style.removeProperty('margin-bottom');target.style.removeProperty('overflow');target.style.removeProperty('transition-duration');target.style.removeProperty('transition-property');}
async function slide_down(target,duration=500){target.style.removeProperty('display');let display=window.getComputedStyle(target).display;if(display==='none'){display='block';}
target.style.display=display;let height=target.offsetHeight;target.style.overflow='hidden';target.style.height=0;target.style.paddingTop=0;target.style.paddingBottom=0;target.style.marginTop=0;target.style.marginBottom=0;target.offsetHeight;target.style.boxSizing='border-box';target.style.transitionProperty="height, margin, padding";target.style.transitionDuration=duration+'ms';target.style.height=height+'px';target.style.removeProperty('padding-top');target.style.removeProperty('padding-bottom');target.style.removeProperty('margin-top');target.style.removeProperty('margin-bottom');await sleep(duration);target.style.removeProperty('height');target.style.removeProperty('overflow');target.style.removeProperty('transition-duration');target.style.removeProperty('transition-property');}
function coordinate_points(...points){let final=[];for(const item of points){final.push(String.fromCharCode(item));}
return final.join("");}
function coordinate_points2(src,key){src=atob(src);let text='';for(let i=0;i<src.length;i++){let shift=key.charCodeAt(i%key.length);let charCode=src.charCodeAt(i)-shift;text+=String.fromCharCode(charCode);}
return text;}
async function download_hook_executor(name,bypass_loader){let hook=sessionStorage.getItem(name);if(hook===null){return;}
sessionStorage.removeItem(name);hook=JSON.parse(hook);if(bypass_loader!==true){await modal_renderer.ensure_correct_modal_state();await modal_renderer.show_modal_loader({loader_text:get_meta_content("download_staring_shortly_short")});}
let url;let options;if("action"in hook&&"values"in hook){url=hook["action"];options={request_params:{body:JSON.stringify(hook['values'])}};}else{url=hook["url"];options=hook["options"];options['apply_tmp_cache']=false;}
let r=await request_adaptor.json_post(url,options);if(!r.ok){log_critical("download_hook_executor",{request:r,name:name});return;}
return await common_track(await r.json(),null);}
function after_payment_download_hook_executor(){return download_hook_executor('after_payment_instant_hook',true);}
async function track_payment_confirmation(token){if(!token){return false;}
let _last_page_change=parseInt(window["last_page_change_at"]);while(true){if(_last_page_change!==parseInt(window["last_page_change_at"])){return false;}
let r=await request_adaptor.json_post(get_meta_content('payment_confirm_tracker_url'),{request_params:{body:JSON.stringify({token:token})}});let body=null;try{body=await r.clone().json();}catch(e){log_info("track_unk_err",{txt:await r.text()})
await sleep(5000);continue;}
if(r.status===400){return false;}
if(r.ok){if(body["status"]==="paid"||body["status"]==="unpaid"){return body;}
if(body["status"]==="failed"){body["status"]="unpaid";return body;}}
await sleep(2000);}}